{
  "uid" : "64c41e89ea8af8bf",
  "name" : "test_login_duo",
  "fullName" : "case.webui_testcase.webui_test_demo1#test_login_duo",
  "historyId" : "98f04bfb1b213c9aa86f6298dd92317d",
  "time" : {
    "start" : 1659686272619,
    "stop" : 1659686279871,
    "duration" : 7252
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 99\nCurrent browser version is 102.0.5005.63 with binary path C:\\Users\\政\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe",
  "statusTrace" : "txt = 'Chrome'\n\n    def open_browser(txt):\n        '''\n        if type_ == \"Chrome\":\n            driver = webdriver.Chrome()\n        elif type_ == \"Firefox\":\n            driver = webdriver.Firefox()\n        else:\n            driver = webdriver.Ie()\n        '''\n    \n        try:\n            # python的反射机制\n>           driver = getattr(webdriver, txt)()\n\ncommon\\web_key.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"None\")>\nexecutable_path = 'chromedriver', port = 0, options = None, service_args = None\ndesired_capabilities = {'browserName': 'chrome', 'goog:chromeOptions': {'args': [], 'extensions': []}, 'platform': 'ANY', 'version': ''}\nservice_log_path = None, chrome_options = None, keep_alive = True\n\n    def __init__(self, executable_path=\"chromedriver\", port=0,\n                 options=None, service_args=None,\n                 desired_capabilities=None, service_log_path=None,\n                 chrome_options=None, keep_alive=True):\n        \"\"\"\n        Creates a new instance of the chrome driver.\n    \n        Starts the service and then creates new instance of chrome driver.\n    \n        :Args:\n         - executable_path - path to the executable. If the default is used it assumes the executable is in the $PATH\n         - port - port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of ChromeOptions\n         - service_args - List of args to pass to the driver service\n         - desired_capabilities - Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Where to log information from the driver.\n         - chrome_options - Deprecated argument for options\n         - keep_alive - Whether to configure ChromeRemoteConnection to use HTTP keep-alive.\n        \"\"\"\n        if chrome_options:\n            warnings.warn('use options instead of chrome_options',\n                          DeprecationWarning, stacklevel=2)\n            options = chrome_options\n    \n        if options is None:\n            # desired_capabilities stays as passed in\n            if desired_capabilities is None:\n                desired_capabilities = self.create_options().to_capabilities()\n        else:\n            if desired_capabilities is None:\n                desired_capabilities = options.to_capabilities()\n            else:\n                desired_capabilities.update(options.to_capabilities())\n    \n        self.service = Service(\n            executable_path,\n            port=port,\n            service_args=service_args,\n            log_path=service_log_path)\n        self.service.start()\n    \n        try:\n>           RemoteWebDriver.__init__(\n                self,\n                command_executor=ChromeRemoteConnection(\n                    remote_server_addr=self.service.service_url,\n                    keep_alive=keep_alive),\n                desired_capabilities=desired_capabilities)\n\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"None\")>\ncommand_executor = <selenium.webdriver.chrome.remote_connection.ChromeRemoteConnection object at 0x0000024110DCFDC0>\ndesired_capabilities = {'browserName': 'chrome', 'goog:chromeOptions': {'args': [], 'extensions': []}, 'platform': 'ANY', 'version': ''}\nbrowser_profile = None, proxy = None, keep_alive = False, file_detector = None\noptions = None\n\n    def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n                 desired_capabilities=None, browser_profile=None, proxy=None,\n                 keep_alive=False, file_detector=None, options=None):\n        \"\"\"\n        Create a new driver that will issue commands using the wire protocol.\n    \n        :Args:\n         - command_executor - Either a string representing URL of the remote server or a custom\n             remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n         - desired_capabilities - A dictionary of capabilities to request when\n             starting the browser session. Required parameter.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.\n             Only used if Firefox is requested. Optional.\n         - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will\n             be started with given proxy settings, if possible. Optional.\n         - keep_alive - Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive. Defaults to False.\n         - file_detector - Pass custom file detector object during instantiation. If None,\n             then default LocalFileDetector() will be used.\n         - options - instance of a driver options.Options class\n        \"\"\"\n        capabilities = {}\n        if options is not None:\n            capabilities = options.to_capabilities()\n        if desired_capabilities is not None:\n            if not isinstance(desired_capabilities, dict):\n                raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n            else:\n                capabilities.update(desired_capabilities)\n        if proxy is not None:\n            warnings.warn(\"Please use FirefoxOptions to set proxy\",\n                          DeprecationWarning, stacklevel=2)\n            proxy.add_to_capabilities(capabilities)\n        self.command_executor = command_executor\n        if type(self.command_executor) is bytes or isinstance(self.command_executor, str):\n            self.command_executor = RemoteConnection(command_executor, keep_alive=keep_alive)\n        self._is_remote = True\n        self.session_id = None\n        self.capabilities = {}\n        self.error_handler = ErrorHandler()\n        self.start_client()\n        if browser_profile is not None:\n            warnings.warn(\"Please use FirefoxOptions to set browser profile\",\n                          DeprecationWarning, stacklevel=2)\n>       self.start_session(capabilities, browser_profile)\n\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"None\")>\ncapabilities = {'browserName': 'chrome', 'goog:chromeOptions': {'args': [], 'extensions': []}, 'platform': 'ANY', 'version': ''}\nbrowser_profile = None\n\n    def start_session(self, capabilities, browser_profile=None):\n        \"\"\"\n        Creates a new session with the desired capabilities.\n    \n        :Args:\n         - browser_name - The name of the browser to request.\n         - version - Which browser version to request.\n         - platform - Which platform to request the browser on.\n         - javascript_enabled - Whether the new session should support JavaScript.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n        \"\"\"\n        if not isinstance(capabilities, dict):\n            raise InvalidArgumentException(\"Capabilities must be a dictionary\")\n        if browser_profile:\n            if \"moz:firefoxOptions\" in capabilities:\n                capabilities[\"moz:firefoxOptions\"][\"profile\"] = browser_profile.encoded\n            else:\n                capabilities.update({'firefox_profile': browser_profile.encoded})\n        w3c_caps = _make_w3c_caps(capabilities)\n        parameters = {\"capabilities\": w3c_caps,\n                      \"desiredCapabilities\": capabilities}\n>       response = self.execute(Command.NEW_SESSION, parameters)\n\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:252: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"None\")>\ndriver_command = 'newSession'\nparams = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'goog:chromeOptions': {'args': [], 'extensions': []}, 'plat...es': {'browserName': 'chrome', 'goog:chromeOptions': {'args': [], 'extensions': []}, 'platform': 'ANY', 'version': ''}}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024110E00310>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77177A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77177A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 99\nE       Current browser version is 102.0.5005.63 with binary path C:\\Users\\政\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe\n\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_login_duo():\n        data = excel_driver.read_excel(\"./data/Excel/webui_data_demo_duo.xlsx\")\n>       excel_driver.implement_case(data)\n\ncase\\webui_testcase\\webui_test_demo1.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\excel_driver.py:73: in implement_case\n    key_value = Key(**sheet_value)\ncommon\\web_key.py:39: in __init__\n    self.driver = open_browser(txt)\ncommon\\web_key.py:31: in open_browser\n    driver = webdriver.Chrome()\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:76: in __init__\n    RemoteWebDriver.__init__(\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024110E4C5B0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77177A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77177A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 99\nE       Current browser version is 102.0.5005.63 with binary path C:\\Users\\政\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe\n\nC:\\Users\\政\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: SessionNotCreatedException",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "case.webui_testcase"
  }, {
    "name" : "suite",
    "value" : "webui_test_demo1"
  }, {
    "name" : "host",
    "value" : "PC-wz"
  }, {
    "name" : "thread",
    "value" : "76728-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.webui_testcase.webui_test_demo1"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "64c41e89ea8af8bf.json",
  "parameterValues" : [ ]
}