{
  "uid" : "e85383731a80510b",
  "name" : "test_personnel_query[data0]",
  "fullName" : "case.interface_testcase.zhgd_into_data#test_personnel_query",
  "historyId" : "4e5f65dc373a47722dc94ecadeb329b9",
  "time" : {
    "start" : 1649750033901,
    "stop" : 1649750033902,
    "duration" : 1
  },
  "description" : "\n    用例描述：插入数据\n    :param data:\n    :return:\n    ",
  "descriptionHtml" : "<pre><code>用例描述：插入数据\n:param data:\n:return:\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: can only concatenate str (not \"bool\") to str",
  "statusTrace" : "data = {'eq': {'code': 200, 'msg': '操作成功'}, 'name': '插入数据', 'request': {'headers': {'Authorization': 'Bearer', 'Content-Type'...CompleteNum': 0, 'projectName': '桩基', 'projectNum': 52, ...}, 'url': 'http://172.1.0.160:8080/system/scheduleUnitPro'}}\n\n    @allure.feature(\"插入数据接口\")\n    @allure.story(\"插入数据\")\n    # @pytest.mark.parametrize('data', YamlUntil(\"./data/interface_Project_query.yaml\").read_yaml())\n    @pytest.mark.parametrize('data', yaml_until.load_yaml(\"./data/Yaml/zhgd_intodata.yaml\"))\n    def test_personnel_query(data):\n        \"\"\"\n        用例描述：插入数据\n        :param data:\n        :return:\n        \"\"\"\n    \n        request = data['request']\n        method = request['method']\n        url = request['url']\n        vales = json.dumps(request[\"params\"])\n        headers = request[\"headers\"]\n>       headers['Authorization'] = headers['Authorization'] + yaml_until.read_extract_yaml(\"token\")\nE       TypeError: can only concatenate str (not \"bool\") to str\n\ncase\\interface_testcase\\zhgd_into_data.py:25: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "execute_database_sql",
    "time" : {
      "start" : 1649750033869,
      "stop" : 1649750033869,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "afterStages" : [ {
    "name" : "execute_database_sql::0",
    "time" : {
      "start" : 1649750034022,
      "stop" : 1649750034022,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "插入数据接口"
  }, {
    "name" : "story",
    "value" : "插入数据"
  }, {
    "name" : "parentSuite",
    "value" : "case.interface_testcase"
  }, {
    "name" : "suite",
    "value" : "zhgd_into_data"
  }, {
    "name" : "host",
    "value" : "PC-wz"
  }, {
    "name" : "thread",
    "value" : "35632-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.interface_testcase.zhgd_into_data"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'name': '插入数据', 'request': {'url': 'http://172.1.0.160:8080/system/scheduleUnitPro', 'method': 'post', 'params': {'projectCode': 'qqqqooooooossssssssssdd5555', 'projectName': '桩基', 'projectUnit': '根', 'projectNum': 52, 'projectCompleteNum': 0, 'sort': 0}, 'headers': {'Content-Type': 'application/json; charset=UTF-8', 'Authorization': 'Bearer'}}, 'eq': {'code': 200, 'msg': '操作成功'}}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "e85383731a80510b.json",
  "parameterValues" : [ "{'name': '插入数据', 'request': {'url': 'http://172.1.0.160:8080/system/scheduleUnitPro', 'method': 'post', 'params': {'projectCode': 'qqqqooooooossssssssssdd5555', 'projectName': '桩基', 'projectUnit': '根', 'projectNum': 52, 'projectCompleteNum': 0, 'sort': 0}, 'headers': {'Content-Type': 'application/json; charset=UTF-8', 'Authorization': 'Bearer'}}, 'eq': {'code': 200, 'msg': '操作成功'}}" ]
}